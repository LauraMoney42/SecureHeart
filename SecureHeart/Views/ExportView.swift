//
//  ExportView.swift
//  Secure Heart
//
//  Export and sharing functionality for heart rate data
//

import SwiftUI

struct ExportOptionsSheet: View {
    @ObservedObject var healthManager: HealthManager
    let sortedHistory: [HeartRateEntry]
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            List {
                Section("Export Options") {
                    ExportOptionRow(icon: "text.alignleft", title: "Share as Text", subtitle: "Messages, Email, Notes", color: .blue) {
                        shareAsText()
                    }
                    
                    ExportOptionRow(icon: "doc.text", title: "Export as PDF", subtitle: "Professional report format", color: .red) {
                        exportAsPDF()
                    }
                    
                    ExportOptionRow(icon: "tablecells", title: "Export as CSV", subtitle: "Spreadsheet data format", color: .green) {
                        exportAsCSV()
                    }
                    
                    ExportOptionRow(icon: "doc.on.doc", title: "Copy to Clipboard", subtitle: "Paste anywhere", color: .orange) {
                        copyToClipboard()
                    }
                }
            }
            .navigationTitle("Export Data")
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button("Done") {
                        dismiss()
                    }
                }
            }
        }
    }
    
    private func shareAsText() {
        let summaryText = generateSummaryText()
        let activityViewController = UIActivityViewController(activityItems: [summaryText], applicationActivities: nil)
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first {
            window.rootViewController?.present(activityViewController, animated: true)
        }
        dismiss()
    }
    
    private func exportAsPDF() {
        // Implementation for PDF export would go here
        print("PDF export requested")
        dismiss()
    }
    
    private func exportAsCSV() {
        let csvContent = generateCSVContent()
        let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent("heart_rate_data.csv")
        
        do {
            try csvContent.write(to: tempURL, atomically: true, encoding: .utf8)
            let activityViewController = UIActivityViewController(activityItems: [tempURL], applicationActivities: nil)
            
            if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               let window = windowScene.windows.first {
                window.rootViewController?.present(activityViewController, animated: true)
            }
        } catch {
            print("Failed to create CSV file: \(error)")
        }
        dismiss()
    }
    
    private func copyToClipboard() {
        let summaryText = generateSummaryText()
        UIPasteboard.general.string = summaryText
        dismiss()
    }
    
    private func generateSummaryText() -> String {
        let totalReadings = sortedHistory.count
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .medium
        dateFormatter.timeStyle = .short
        
        let oldestReading = sortedHistory.last
        let newestReading = sortedHistory.first
        
        let avgHeartRate = sortedHistory.isEmpty ? 0 : sortedHistory.map { $0.heartRate }.reduce(0, +) / sortedHistory.count
        let minHeartRate = sortedHistory.map { $0.heartRate }.min() ?? 0
        let maxHeartRate = sortedHistory.map { $0.heartRate }.max() ?? 0
        
        var summary = """
        ðŸ“Š Heart Rate Summary Report
        
        ðŸ“ˆ Statistics:
        â€¢ Total Readings: \(totalReadings)
        â€¢ Average: \(avgHeartRate) BPM
        â€¢ Minimum: \(minHeartRate) BPM
        â€¢ Maximum: \(maxHeartRate) BPM
        
        """
        
        if let oldest = oldestReading, let newest = newestReading {
            summary += """
            ðŸ“… Time Range:
            â€¢ From: \(dateFormatter.string(from: oldest.date))
            â€¢ To: \(dateFormatter.string(from: newest.date))
            
            """
        }
        
        // Add recent readings
        summary += "ðŸ“‹ Recent Readings:\n"
        for entry in sortedHistory.prefix(10) {
            let contextText = entry.context ?? "Unknown"
            summary += "â€¢ \(entry.heartRate) BPM - \(contextText) - \(dateFormatter.string(from: entry.date))\n"
        }
        
        summary += "\nðŸ’“ Generated by Secure Heart App"
        
        return summary
    }
    
    private func generateCSVContent() -> String {
        var csvContent = "Date,Time,Heart Rate (BPM),Context,Delta\n"
        
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .short
        let timeFormatter = DateFormatter()
        timeFormatter.timeStyle = .short
        
        for entry in sortedHistory {
            let date = dateFormatter.string(from: entry.date)
            let time = timeFormatter.string(from: entry.date)
            let context = entry.context ?? "Unknown"
            let delta = entry.delta
            
            csvContent += "\(date),\(time),\(entry.heartRate),\(context),\(delta)\n"
        }
        
        return csvContent
    }
}

struct ExportOptionRow: View {
    let icon: String
    let title: String
    let subtitle: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            HStack {
                Image(systemName: icon)
                    .foregroundColor(color)
                    .font(.title2)
                    .frame(width: 30)
                
                VStack(alignment: .leading) {
                    Text(title)
                        .foregroundColor(.primary)
                        .font(.headline)
                    Text(subtitle)
                        .foregroundColor(.secondary)
                        .font(.caption)
                }
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .foregroundColor(.secondary)
                    .font(.caption)
            }
        }
        .buttonStyle(PlainButtonStyle())
    }
}