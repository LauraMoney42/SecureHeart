rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Emergency contacts are private to each user
      match /emergencyContacts/{contactId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Emergency events are readable by authenticated users (for their own events)
    match /emergencyEvents/{eventId} {
      allow read: if request.auth != null &&
                     (request.auth.uid == resource.data.userID);
      allow create: if request.auth != null &&
                       (request.auth.uid == request.resource.data.userID);
      allow update: if request.auth != null &&
                       (request.auth.uid == resource.data.userID);
    }

    // Notifications are write-only for authenticated users
    // Cloud Functions will process these and create emergency events
    match /notifications/{notificationId} {
      allow create: if request.auth != null &&
                       (request.auth.uid == request.resource.data.userID);
      allow read, update: if false; // Only Cloud Functions can read/update
      allow delete: if false;
    }

    // Invitations are write-only for authenticated users
    // Cloud Functions will process these and send invitations
    match /invitations/{invitationId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // Only Cloud Functions can process
    }

    // Notification deliveries are read-only for users
    // Created by Cloud Functions for tracking delivery status
    match /notificationDeliveries/{deliveryId} {
      allow read: if request.auth != null;
      allow write: if false; // Only Cloud Functions can write
    }

    // Allow users to update their FCM tokens
    match /users/{userId} {
      allow update: if request.auth != null &&
                       request.auth.uid == userId &&
                       request.resource.data.keys().hasOnly(['fcmToken', 'lastUpdated']);
    }
  }
}